# import itfrom django.http import HttpResponsefrom collections import OrderedDictfrom django.http import JsonResponsefrom django.shortcuts import render_to_responsefrom rest_framework.renderers import JSONRendererfrom rest_framework.response import Responsefrom rest_framework.views import APIViewfrom models import Scores, PopulationAndAreafrom django.views.decorators.csrf import csrf_exemptimport jsonimport logginglog = logging.getLogger(__name__)def liangsongyitang_json(request):    # do something with the your data    data = []    t = {"1": 32, "2": 38}    data.append(t)    # todo_items = ['Mow Lawn', 'Buy Groceries', ]    data = json.dumps(data)    return HttpResponse(data, content_type='application/json')    # just return a JsonResponse    # return JsonResponse(t)@csrf_exemptdef s_action(request):    housing_cost = request.GET.get('housing_cost', None)    w1 = float(housing_cost) / 10.0    dining_cost = request.GET.get('dining_cost', None)    w2 = float(dining_cost) / 10.0    education_ranking = request.GET.get('education_ranking', None)    w3 = float(education_ranking) / 10.0    crime_rate = request.GET.get('crime_rate', None)    w4 = float(crime_rate) / 10.0    employment = request.GET.get('employment', None)    w5 = float(employment) / 10.0    aq = request.GET.get('air_quality', None)    w6 = float(aq) / 10.0    amenities = request.GET.get('amenities', None)    w7 = float(amenities) / 10.0    log.debug("======>>>>>>>>>")    log.debug(w1)    log.debug(w2)    log.debug(w3)    log.debug(w4)    log.debug(w5)    log.debug(w6)    log.debug(w7)    all_scores = Scores.objects.all()    score_dict = OrderedDict()    # score_dict = {}    for x in all_scores:        # print('')        # print("----")        # print(x.district_ch)        score_list = []        numerator = float(x.house_cost) * w1 + float(x.dining_cost) * w2 + float(x.crime_rate) * w3 + float(            x.edu_rank) * w4 + float(x.employment) * w5 + float(x.amenities) * w7 + float(x.air_quality) * w6 \                    + float(x.house_cost) + float(x.dining_cost) + float(x.crime_rate) + float(x.edu_rank) + \                    float(x.employment) + float(x.amenities) + float(x.air_quality)        denominator = (w1 + w2 + w3 + w4 + w5 + w6 + w7) + 7        score = int(numerator / denominator)        score_list.append(score)        score_dict[x.district_en] = score        # print(score)    d = OrderedDict(sorted(score_dict.items(), key=lambda t: t[1]))    els = list(d.items())  # explicitly convert to a list, in case it's Python 3.x    # log.debug("===============")    # log.debug("===============")    log.debug(d)    log.debug(els)    # log.debug('-----------------')    for x in els:        # log.debug(x[0])        # log.debug(type(x[0]))        # log.debug(x[1])        # log.debug(type(x[1]))        scores_set = Scores.objects.all()        for score in scores_set:            if score.district_en == x[0]:                score.score_of_liveability = x[1]                score.save()        # x.save()    # log.debug('')    # get first inserted element    # print(els[0])    # print(els[-1])    best_dist = els[-1][0]    best_score = els[-1][1]    # print(els[-1][0])    # print(els[-1][1])    # print(type(els[-1]))    # print(type(els[-1][1]))    # print(d)    # max(score)    # log.debug(housing_cost)    # log.debug(dining_cost)    # log.debug(education_ranking)    # log.debug(crime_rate)    # log.debug('======------======')    # log.debug(w1)    data = {}    # data['jianshazui'] = 55    data['best_dis'] = best_dist    data['best_sco'] = best_score    # log.debug("type of best dist " + str(type(best_dist)))    best_one = Scores.objects.get(district_en=best_dist)    id_x = best_one.id    # for    # bo = PopulationAndArea.objects.get(district_en=best_dist)    # best_dist = str(best_dist)    # log.debug(best_dist)    bo = PopulationAndArea.objects.get(id=id_x)    data['cr'] = best_one.crime_rate    data['housing'] = best_one.house_cost    data['dining'] = best_one.dining_cost    data['edu'] = best_one.edu_rank    data['employment'] = best_one.employment    data['air_quality'] = best_one.air_quality    data['amenities'] = best_one.amenities    data['popu'] = bo.population    data['area'] = bo.area    # log.debug(bo.district_en)    # log.debug(type(bo.district_en))    # log.debug(best_one.district_en)    # log.debug(type(best_one.district_en))    return HttpResponse(json.dumps(data), content_type="application/json")    # obj = {"a": 1, "b": 2}    # return render_to_response("index.html", {"list_json_from_backend": json.dumps(obj)})    # return HttpResponse(json.dumps({'foo': 'bar'}))    # return HttpResponse(simplejson.dumps(data_dict))