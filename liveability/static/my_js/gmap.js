// * Created by Pharrell_WANG on 30/3/2017.// *//** Loads the state boundary polygons from a GeoJSON source. */function loadMapShapes() {    // load US state outline polygons from a GeoJson file    map.data.loadGeoJson("{% static '' %}geojson/hk.json", {idPropertyName: 'ID_1'});    // wait for the request to complete by listening for the first feature to be    // added    google.maps.event.addListenerOnce(map.data, 'addfeature', function () {        google.maps.event.trigger(document.getElementById('census-variable'),            'change');    });}/** * Loads the census data from a simulated API call to the US Census API. * * @param {string} variable */function loadCensusData(variable) {    // load the requested variable from the census API (using local copies)    var xhr = new XMLHttpRequest();    if (variable == "liangsongyitang") {        xhr.open('GET', 'http://192.168.243.134:1234/tdone_api/');    }    else if (variable == "edu") {        xhr.open('GET', 'http://192.168.243.134:1234/edu_api/');    }    else if (variable == "house") {        xhr.open('GET', 'http://192.168.243.134:1234/hp_api/');    }    else if (variable == "cr") {        xhr.open('GET', 'http://192.168.243.134:1234/cr_api/');    }    xhr.onload = function () {        var censusData = JSON.parse(xhr.responseText);        censusData.shift(); // the first row contains column names        censusData.forEach(function (row) {            var censusVariable = parseFloat(row[0]);            var stateId = row[1];            var populationVariable = row[2];            var areaVariable = row[3];            var district_en_Variable = row[4];            var district_ch_Variable = row[5];            var scoreVariable = row[6]            console.log(censusVariable);            // keep track of min and max values            if (censusVariable < censusMin) {                censusMin = censusVariable;            }            if (censusVariable > censusMax) {                censusMax = censusVariable;            }            // update the existing row with the new data            map.data                .getFeatureById(stateId)                .setProperty('census_variable', censusVariable);            map.data                .getFeatureById(stateId)                .setProperty('population_variable', populationVariable);            map.data                .getFeatureById(stateId)                .setProperty('area_variable', areaVariable);            map.data                .getFeatureById(stateId)                .setProperty('district_en_variable', district_en_Variable);            map.data                .getFeatureById(stateId)                .setProperty('district_ch_variable', district_ch_Variable);            map.data                .getFeatureById(stateId)                .setProperty('score_variable', scoreVariable);        });        // update and display the legend        document.getElementById('census-min').textContent =            censusMin.toLocaleString();        document.getElementById('census-max').textContent =            censusMax.toLocaleString();    };    xhr.send();}/** Removes census data from each shape on the map and resets the UI. */function clearCensusData() {    censusMin = Number.MAX_VALUE;    censusMax = -Number.MAX_VALUE;    map.data.forEach(function (row) {        row.setProperty('census_variable', 66);    });    document.getElementById('data-box').style.display = 'none';    document.getElementById('data-box-popu').style.display = 'none';    document.getElementById('data-box-area').style.display = 'none';    document.getElementById('data-box-district-en').style.display = 'none';    document.getElementById('data-box-district-ch').style.display = 'none';    document.getElementById('data-caret').style.display = 'none';}/** * Applies a gradient style based on the 'census_variable' column. * This is the callback passed to data.setStyle() and is called for each row in * the data set.  Check out the docs for Data.StylingFunction. * * @param {google.maps.Data.Feature} feature */function styleFeature(feature) {    var high = [5, 69, 54];  // color of smallest datum    var low = [151, 83, 34];   // color of largest datum    // delta represents where the value sits between the min and max    var delta = (feature.getProperty('census_variable') - censusMin) /        (censusMax - censusMin);    var color = [];    for (var i = 0; i < 3; i++) {        // calculate an integer color based on the delta        color[i] = (high[i] - low[i]) * delta + low[i];    }    // determine whether to show this shape or not    var showRow = true;    if (feature.getProperty('census_variable') == null ||        isNaN(feature.getProperty('census_variable'))) {        showRow = false;    }    var outlineWeight = 0.5, zIndex = 30;    if (feature.getProperty('state') === 'hover') {        outlineWeight = zIndex = 6;    }    return {        strokeWeight: outlineWeight,        strokeColor: '#fcffed',        zIndex: zIndex,        fillColor: 'hsl(' + color[0] + ',' + color[1] + '%,' + color[2] + '%)',        fillOpacity: 0.75,        visible: showRow    };}/** * Responds to the mouse-in event on a map shape (state). * * @param {?google.maps.MouseEvent} e */function mouseInToRegion(e) {    // set the hover state so the setStyle function can change the border -----    e.feature.setProperty('state', 'hover');    var percent = (e.feature.getProperty('census_variable') - censusMin) /        (censusMax - censusMin) * 100;    // update the label    document.getElementById('data-value').textContent =        e.feature.getProperty('census_variable');    document.getElementById('data-value-population').textContent =        e.feature.getProperty('population_variable');    document.getElementById('data-value-area').textContent =        e.feature.getProperty('area_variable');    document.getElementById('data-value-district-en').textContent =        e.feature.getProperty('district_en_variable');    document.getElementById('data-value-district-ch').textContent =        e.feature.getProperty('district_ch_variable');    document.getElementById('data-box').style.display = 'block';    document.getElementById('data-box-popu').style.display = 'block';    document.getElementById('data-box-area').style.display = 'block';    document.getElementById('data-box-district-en').style.display = 'block';    document.getElementById('data-box-district-ch').style.display = 'block';    document.getElementById('data-caret').style.display = 'block';    document.getElementById('data-caret').style.paddingLeft = percent + '%';}/** * Responds to the mouse-out event on a map shape (state). * * @param {?google.maps.MouseEvent} e */function mouseOutOfRegion(e) {    // reset the hover state, returning the border to normal    e.feature.setProperty('state', 'normal');}