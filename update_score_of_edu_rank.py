# # This Python file uses the following encoding: utf-8# !/usr/bin/env pythonimport osimport djangoos.environ.setdefault("DJANGO_SETTINGS_MODULE", "project_liveability.settings")django.setup()import loggingfrom collections import OrderedDictfrom liveability.models import Scores, PriSchoolRank, MidSchoolRanklog = logging.getLogger(__name__)if __name__ == "__main__":    #  Central & Western    loc_list = ['Central & Western', 'Wan Chai', 'Eastern', 'Southern', 'Yau Tsim Mong', 'Sham Shui Po', 'Kowloon City',                'Wong Tai Sin', 'Kwun Tong', 'Kwai Tsing', 'Tsuen Wan', 'Tuen Mun', 'Yuen Long', 'North', 'Tai Po',                'Sha Tin', 'Sai Kung', 'Island']    edu_ordered_dic = OrderedDict()    for loc in loc_list:        # print(loc)        primary_school_ranking_of_one_dist = PriSchoolRank.objects.filter(district_eng=loc)        total = 0.0        for x in primary_school_ranking_of_one_dist:            total += float(x.ranking_score_average)        ave_p = float(total) / len(primary_school_ranking_of_one_dist)        # print ave        middle_school_ranking_of_one_dist = MidSchoolRank.objects.filter(district_eng=loc)        total_m = 0.0        for y in middle_school_ranking_of_one_dist:            total_m += float(y.ranking_score_average)        ave_m = float(total_m) / len(middle_school_ranking_of_one_dist)        ave = (ave_m + ave_p) / 2.0        edu_ordered_dic[loc] = ave    print(edu_ordered_dic)    d = OrderedDict(sorted(edu_ordered_dic.items(), key=lambda t: t[1]))    e = list(d.items())    print(e[0][1])    print(e[17][1])    i_min = e[0][1]    i_max = e[17][1]    for x in e:        scaled_score = (x[1] - i_min) / float(i_max - i_min) * 100        # inversed_score = 100 - scaled_score        scores_set = Scores.objects.all()        for score in scores_set:            if score.district_en == x[0]:                # print(x[0])                score.edu_rank = scaled_score                score.save()                # edu_score_of_dist = Scores.objects.get(district_en=loc)                # edu_score_of_dist.edu_rank =